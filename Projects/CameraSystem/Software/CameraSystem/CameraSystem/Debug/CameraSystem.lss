
CameraSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000abd  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000748  00000000  00000000  00000dd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000690  00000000  00000000  00001521  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000114  00000000  00000000  00001bb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000423  00000000  00000000  00001cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000235  00000000  00000000  000020eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00002320  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 eb       	ldi	r30, 0xB4	; 180
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:



int main(void)
{
	DDRD=0xFF;
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	81 bb       	out	0x11, r24	; 17
	DDRA=0xFF;
  86:	8a bb       	out	0x1a, r24	; 26
	
	PORTD|=0xFF;
  88:	92 b3       	in	r25, 0x12	; 18
  8a:	82 bb       	out	0x12, r24	; 18
	PORTA|=0x00;
  8c:	8b b3       	in	r24, 0x1b	; 27
  8e:	8b bb       	out	0x1b, r24	; 27
	/* Replace with your application code */
	
	while (1)
	{
		
		PORTD^=(1 << ledGreen);
  90:	c1 e0       	ldi	r28, 0x01	; 1
  92:	82 b3       	in	r24, 0x12	; 18
  94:	8c 27       	eor	r24, r28
  96:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	2f ef       	ldi	r18, 0xFF	; 255
  9a:	88 e0       	ldi	r24, 0x08	; 8
  9c:	9d e3       	ldi	r25, 0x3D	; 61
  9e:	21 50       	subi	r18, 0x01	; 1
  a0:	80 40       	sbci	r24, 0x00	; 0
  a2:	90 40       	sbci	r25, 0x00	; 0
  a4:	e1 f7       	brne	.-8      	; 0x9e <main+0x1c>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <main+0x26>
  a8:	00 00       	nop
		
		_delay_ms(5000);
		PORTA = getKeyStatus();
  aa:	0e 94 59 00 	call	0xb2	; 0xb2 <getKeyStatus>
  ae:	8b bb       	out	0x1b, r24	; 27
  b0:	f0 cf       	rjmp	.-32     	; 0x92 <main+0x10>

000000b2 <getKeyStatus>:
	};
	i2c_stop();
	return 0;
}

uint8_t getKeyStatus() {
  b2:	cf 93       	push	r28
	
	unsigned char ret;
	i2c_init();
  b4:	0e 94 77 00 	call	0xee	; 0xee <i2c_init>
	if(i2c_start_wait((chipAddress << 1) | I2C_WRITE)) {
  b8:	86 e3       	ldi	r24, 0x36	; 54
  ba:	0e 94 99 00 	call	0x132	; 0x132 <i2c_start_wait>
  be:	88 23       	and	r24, r24
  c0:	89 f0       	breq	.+34     	; 0xe4 <getKeyStatus+0x32>
		if (!i2c_write(keyStatus)){
  c2:	83 e0       	ldi	r24, 0x03	; 3
  c4:	0e 94 c4 00 	call	0x188	; 0x188 <i2c_write>
  c8:	81 11       	cpse	r24, r1
  ca:	0c c0       	rjmp	.+24     	; 0xe4 <getKeyStatus+0x32>
			// Write was successful
			if (!i2c_rep_start((chipAddress << 1 ) | I2C_READ)) {
  cc:	87 e3       	ldi	r24, 0x37	; 55
  ce:	0e 94 bb 00 	call	0x176	; 0x176 <i2c_rep_start>
  d2:	81 11       	cpse	r24, r1
  d4:	07 c0       	rjmp	.+14     	; 0xe4 <getKeyStatus+0x32>
				// Device is accessible
				ret = i2c_readNak();
  d6:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <i2c_readNak>
  da:	c8 2f       	mov	r28, r24
				i2c_stop();
  dc:	0e 94 be 00 	call	0x17c	; 0x17c <i2c_stop>
				return ret;
  e0:	8c 2f       	mov	r24, r28
  e2:	03 c0       	rjmp	.+6      	; 0xea <getKeyStatus+0x38>
			};
		};
	};
	i2c_stop();
  e4:	0e 94 be 00 	call	0x17c	; 0x17c <i2c_stop>
	return 0;
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	cf 91       	pop	r28
  ec:	08 95       	ret

000000ee <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	while(!(TWCR & (1<<TWINT)));    

    return TWDR;

}/* i2c_readAck */
  ee:	11 b8       	out	0x01, r1	; 1
  f0:	8c e0       	ldi	r24, 0x0C	; 12
  f2:	80 b9       	out	0x00, r24	; 0
  f4:	08 95       	ret

000000f6 <i2c_start>:
  f6:	94 ea       	ldi	r25, 0xA4	; 164
  f8:	96 bf       	out	0x36, r25	; 54
  fa:	06 b6       	in	r0, 0x36	; 54
  fc:	07 fe       	sbrs	r0, 7
  fe:	fd cf       	rjmp	.-6      	; 0xfa <i2c_start+0x4>
 100:	91 b1       	in	r25, 0x01	; 1
 102:	98 7f       	andi	r25, 0xF8	; 248
 104:	98 30       	cpi	r25, 0x08	; 8
 106:	11 f0       	breq	.+4      	; 0x10c <i2c_start+0x16>
 108:	90 31       	cpi	r25, 0x10	; 16
 10a:	79 f4       	brne	.+30     	; 0x12a <i2c_start+0x34>
 10c:	83 b9       	out	0x03, r24	; 3
 10e:	84 e8       	ldi	r24, 0x84	; 132
 110:	86 bf       	out	0x36, r24	; 54
 112:	06 b6       	in	r0, 0x36	; 54
 114:	07 fe       	sbrs	r0, 7
 116:	fd cf       	rjmp	.-6      	; 0x112 <i2c_start+0x1c>
 118:	91 b1       	in	r25, 0x01	; 1
 11a:	98 7f       	andi	r25, 0xF8	; 248
 11c:	98 31       	cpi	r25, 0x18	; 24
 11e:	39 f0       	breq	.+14     	; 0x12e <i2c_start+0x38>
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 34       	cpi	r25, 0x40	; 64
 124:	29 f4       	brne	.+10     	; 0x130 <i2c_start+0x3a>
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	08 95       	ret
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	08 95       	ret
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	08 95       	ret

00000132 <i2c_start_wait>:
 132:	24 ea       	ldi	r18, 0xA4	; 164
 134:	34 e8       	ldi	r19, 0x84	; 132
 136:	44 e9       	ldi	r20, 0x94	; 148
 138:	26 bf       	out	0x36, r18	; 54
 13a:	06 b6       	in	r0, 0x36	; 54
 13c:	07 fe       	sbrs	r0, 7
 13e:	fd cf       	rjmp	.-6      	; 0x13a <i2c_start_wait+0x8>
 140:	91 b1       	in	r25, 0x01	; 1
 142:	98 7f       	andi	r25, 0xF8	; 248
 144:	98 30       	cpi	r25, 0x08	; 8
 146:	11 f0       	breq	.+4      	; 0x14c <i2c_start_wait+0x1a>
 148:	90 31       	cpi	r25, 0x10	; 16
 14a:	b1 f7       	brne	.-20     	; 0x138 <i2c_start_wait+0x6>
 14c:	83 b9       	out	0x03, r24	; 3
 14e:	36 bf       	out	0x36, r19	; 54
 150:	06 b6       	in	r0, 0x36	; 54
 152:	07 fe       	sbrs	r0, 7
 154:	fd cf       	rjmp	.-6      	; 0x150 <i2c_start_wait+0x1e>
 156:	91 b1       	in	r25, 0x01	; 1
 158:	98 7f       	andi	r25, 0xF8	; 248
 15a:	90 32       	cpi	r25, 0x20	; 32
 15c:	11 f0       	breq	.+4      	; 0x162 <i2c_start_wait+0x30>
 15e:	98 35       	cpi	r25, 0x58	; 88
 160:	29 f4       	brne	.+10     	; 0x16c <i2c_start_wait+0x3a>
 162:	46 bf       	out	0x36, r20	; 54
 164:	06 b6       	in	r0, 0x36	; 54
 166:	04 fc       	sbrc	r0, 4
 168:	fd cf       	rjmp	.-6      	; 0x164 <i2c_start_wait+0x32>
 16a:	e6 cf       	rjmp	.-52     	; 0x138 <i2c_start_wait+0x6>
 16c:	98 31       	cpi	r25, 0x18	; 24
 16e:	11 f0       	breq	.+4      	; 0x174 <i2c_start_wait+0x42>
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	08 95       	ret
 174:	08 95       	ret

00000176 <i2c_rep_start>:
 176:	0e 94 7b 00 	call	0xf6	; 0xf6 <i2c_start>
 17a:	08 95       	ret

0000017c <i2c_stop>:
 17c:	84 e9       	ldi	r24, 0x94	; 148
 17e:	86 bf       	out	0x36, r24	; 54
 180:	06 b6       	in	r0, 0x36	; 54
 182:	04 fc       	sbrc	r0, 4
 184:	fd cf       	rjmp	.-6      	; 0x180 <i2c_stop+0x4>
 186:	08 95       	ret

00000188 <i2c_write>:
 188:	83 b9       	out	0x03, r24	; 3
 18a:	84 e8       	ldi	r24, 0x84	; 132
 18c:	86 bf       	out	0x36, r24	; 54
 18e:	06 b6       	in	r0, 0x36	; 54
 190:	07 fe       	sbrs	r0, 7
 192:	fd cf       	rjmp	.-6      	; 0x18e <i2c_write+0x6>
 194:	91 b1       	in	r25, 0x01	; 1
 196:	98 7f       	andi	r25, 0xF8	; 248
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	98 32       	cpi	r25, 0x28	; 40
 19c:	09 f4       	brne	.+2      	; 0x1a0 <i2c_write+0x18>
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	08 95       	ret

000001a2 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 1a2:	84 e8       	ldi	r24, 0x84	; 132
 1a4:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));
 1a6:	06 b6       	in	r0, 0x36	; 54
 1a8:	07 fe       	sbrs	r0, 7
 1aa:	fd cf       	rjmp	.-6      	; 0x1a6 <i2c_readNak+0x4>
	
    return TWDR;
 1ac:	83 b1       	in	r24, 0x03	; 3

}/* i2c_readNak */
 1ae:	08 95       	ret

000001b0 <_exit>:
 1b0:	f8 94       	cli

000001b2 <__stop_program>:
 1b2:	ff cf       	rjmp	.-2      	; 0x1b2 <__stop_program>
