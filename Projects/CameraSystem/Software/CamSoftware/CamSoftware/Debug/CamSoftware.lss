
CamSoftware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000023a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000028e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000028e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000dc7  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008cf  00000000  00000000  00001193  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006a4  00000000  00000000  00001a62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000017c  00000000  00000000  00002108  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000064e  00000000  00000000  00002284  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000455  00000000  00000000  000028d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00002d27  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 1b 01 	jmp	0x236	; 0x236 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
const int ledYellow = PIND1;
const int ledGreen = PIND0;


int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	1f 92       	push	r1
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
	DDRD=0xFF;
  76:	8f ef       	ldi	r24, 0xFF	; 255
  78:	81 bb       	out	0x11, r24	; 17
	DDRA=0xFF;
  7a:	8a bb       	out	0x1a, r24	; 26
	DDRB=0xFF;	
  7c:	87 bb       	out	0x17, r24	; 23
	PORTD|=0xFF;
  7e:	92 b3       	in	r25, 0x12	; 18
  80:	82 bb       	out	0x12, r24	; 18
	PORTA|=0x00;
  82:	9b b3       	in	r25, 0x1b	; 27
  84:	9b bb       	out	0x1b, r25	; 27
	PORTB|=0xFF;
  86:	98 b3       	in	r25, 0x18	; 24
  88:	88 bb       	out	0x18, r24	; 24
	
	//Initialiting modules
	QTSensor qt;
  8a:	ce 01       	movw	r24, r28
  8c:	01 96       	adiw	r24, 0x01	; 1
  8e:	0e 94 5a 00 	call	0xb4	; 0xb4 <_ZN8QTSensorC1Ev>
		//PORTA = qt.getLowPowerMode();
		
		//_delay_ms(1000);

		if (qt.setLowPowerMode(255)) {
			PORTD^=(1 << ledYellow);
  92:	12 e0       	ldi	r17, 0x02	; 2
		
		//PORTD^=(1 << ledGreen);
		
		
		
		PORTA = qt.getKeyStatus();
  94:	ce 01       	movw	r24, r28
  96:	01 96       	adiw	r24, 0x01	; 1
  98:	0e 94 5d 00 	call	0xba	; 0xba <_ZN8QTSensor12getKeyStatusEv>
  9c:	8b bb       	out	0x1b, r24	; 27
		
		//PORTA = qt.getLowPowerMode();
		
		//_delay_ms(1000);

		if (qt.setLowPowerMode(255)) {
  9e:	6f ef       	ldi	r22, 0xFF	; 255
  a0:	ce 01       	movw	r24, r28
  a2:	01 96       	adiw	r24, 0x01	; 1
  a4:	0e 94 62 00 	call	0xc4	; 0xc4 <_ZN8QTSensor15setLowPowerModeEh>
  a8:	88 23       	and	r24, r24
  aa:	a1 f3       	breq	.-24     	; 0x94 <main+0x28>
			PORTD^=(1 << ledYellow);
  ac:	82 b3       	in	r24, 0x12	; 18
  ae:	81 27       	eor	r24, r17
  b0:	82 bb       	out	0x12, r24	; 18
  b2:	f0 cf       	rjmp	.-32     	; 0x94 <main+0x28>

000000b4 <_ZN8QTSensorC1Ev>:
  b4:	0e 94 68 00 	call	0xd0	; 0xd0 <_Z8i2c_initv>
  b8:	08 95       	ret

000000ba <_ZN8QTSensor12getKeyStatusEv>:
  ba:	63 e0       	ldi	r22, 0x03	; 3
  bc:	8b e1       	ldi	r24, 0x1B	; 27
  be:	0e 94 ed 00 	call	0x1da	; 0x1da <_Z22i2c_read_from_registerhh>
  c2:	08 95       	ret

000000c4 <_ZN8QTSensor15setLowPowerModeEh>:
  c4:	46 2f       	mov	r20, r22
  c6:	64 e5       	ldi	r22, 0x54	; 84
  c8:	8b e1       	ldi	r24, 0x1B	; 27
  ca:	0e 94 c6 00 	call	0x18c	; 0x18c <_Z21i2c_write_to_registerhhh>
  ce:	08 95       	ret

000000d0 <_Z8i2c_initv>:
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	while(!(TWCR & (1<<TWINT)));    

    return TWDR;

}/* i2c_readAck */
  d0:	11 b8       	out	0x01, r1	; 1
  d2:	8c e0       	ldi	r24, 0x0C	; 12
  d4:	80 b9       	out	0x00, r24	; 0
  d6:	08 95       	ret

000000d8 <_Z9i2c_starth>:
  d8:	94 ea       	ldi	r25, 0xA4	; 164
  da:	96 bf       	out	0x36, r25	; 54
  dc:	06 b6       	in	r0, 0x36	; 54
  de:	07 fe       	sbrs	r0, 7
  e0:	fd cf       	rjmp	.-6      	; 0xdc <_Z9i2c_starth+0x4>
  e2:	91 b1       	in	r25, 0x01	; 1
  e4:	98 7f       	andi	r25, 0xF8	; 248
  e6:	98 30       	cpi	r25, 0x08	; 8
  e8:	11 f0       	breq	.+4      	; 0xee <_Z9i2c_starth+0x16>
  ea:	90 31       	cpi	r25, 0x10	; 16
  ec:	79 f4       	brne	.+30     	; 0x10c <_Z9i2c_starth+0x34>
  ee:	83 b9       	out	0x03, r24	; 3
  f0:	84 e8       	ldi	r24, 0x84	; 132
  f2:	86 bf       	out	0x36, r24	; 54
  f4:	06 b6       	in	r0, 0x36	; 54
  f6:	07 fe       	sbrs	r0, 7
  f8:	fd cf       	rjmp	.-6      	; 0xf4 <_Z9i2c_starth+0x1c>
  fa:	91 b1       	in	r25, 0x01	; 1
  fc:	98 7f       	andi	r25, 0xF8	; 248
  fe:	98 31       	cpi	r25, 0x18	; 24
 100:	39 f0       	breq	.+14     	; 0x110 <_Z9i2c_starth+0x38>
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 34       	cpi	r25, 0x40	; 64
 106:	29 f4       	brne	.+10     	; 0x112 <_Z9i2c_starth+0x3a>
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	08 95       	ret
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	08 95       	ret
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	08 95       	ret

00000114 <_Z14i2c_start_waith>:
 114:	24 ea       	ldi	r18, 0xA4	; 164
 116:	34 e8       	ldi	r19, 0x84	; 132
 118:	44 e9       	ldi	r20, 0x94	; 148
 11a:	26 bf       	out	0x36, r18	; 54
 11c:	06 b6       	in	r0, 0x36	; 54
 11e:	07 fe       	sbrs	r0, 7
 120:	fd cf       	rjmp	.-6      	; 0x11c <_Z14i2c_start_waith+0x8>
 122:	91 b1       	in	r25, 0x01	; 1
 124:	98 7f       	andi	r25, 0xF8	; 248
 126:	98 30       	cpi	r25, 0x08	; 8
 128:	11 f0       	breq	.+4      	; 0x12e <_Z14i2c_start_waith+0x1a>
 12a:	90 31       	cpi	r25, 0x10	; 16
 12c:	b1 f7       	brne	.-20     	; 0x11a <_Z14i2c_start_waith+0x6>
 12e:	83 b9       	out	0x03, r24	; 3
 130:	36 bf       	out	0x36, r19	; 54
 132:	06 b6       	in	r0, 0x36	; 54
 134:	07 fe       	sbrs	r0, 7
 136:	fd cf       	rjmp	.-6      	; 0x132 <_Z14i2c_start_waith+0x1e>
 138:	91 b1       	in	r25, 0x01	; 1
 13a:	98 7f       	andi	r25, 0xF8	; 248
 13c:	90 32       	cpi	r25, 0x20	; 32
 13e:	11 f0       	breq	.+4      	; 0x144 <_Z14i2c_start_waith+0x30>
 140:	98 35       	cpi	r25, 0x58	; 88
 142:	29 f4       	brne	.+10     	; 0x14e <_Z14i2c_start_waith+0x3a>
 144:	46 bf       	out	0x36, r20	; 54
 146:	06 b6       	in	r0, 0x36	; 54
 148:	04 fc       	sbrc	r0, 4
 14a:	fd cf       	rjmp	.-6      	; 0x146 <_Z14i2c_start_waith+0x32>
 14c:	e6 cf       	rjmp	.-52     	; 0x11a <_Z14i2c_start_waith+0x6>
 14e:	98 31       	cpi	r25, 0x18	; 24
 150:	11 f0       	breq	.+4      	; 0x156 <_Z14i2c_start_waith+0x42>
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	08 95       	ret
 156:	08 95       	ret

00000158 <_Z8i2c_stopv>:
 158:	84 e9       	ldi	r24, 0x94	; 148
 15a:	86 bf       	out	0x36, r24	; 54
 15c:	06 b6       	in	r0, 0x36	; 54
 15e:	04 fc       	sbrc	r0, 4
 160:	fd cf       	rjmp	.-6      	; 0x15c <_Z8i2c_stopv+0x4>
 162:	08 95       	ret

00000164 <_Z9i2c_writeh>:
 164:	83 b9       	out	0x03, r24	; 3
 166:	84 e8       	ldi	r24, 0x84	; 132
 168:	86 bf       	out	0x36, r24	; 54
 16a:	06 b6       	in	r0, 0x36	; 54
 16c:	07 fe       	sbrs	r0, 7
 16e:	fd cf       	rjmp	.-6      	; 0x16a <_Z9i2c_writeh+0x6>
 170:	91 b1       	in	r25, 0x01	; 1
 172:	98 7f       	andi	r25, 0xF8	; 248
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	98 32       	cpi	r25, 0x28	; 40
 178:	09 f4       	brne	.+2      	; 0x17c <_Z9i2c_writeh+0x18>
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	08 95       	ret

0000017e <_Z11i2c_readNakv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 17e:	84 e8       	ldi	r24, 0x84	; 132
 180:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));
 182:	06 b6       	in	r0, 0x36	; 54
 184:	07 fe       	sbrs	r0, 7
 186:	fd cf       	rjmp	.-6      	; 0x182 <_Z11i2c_readNakv+0x4>
	
    return TWDR;
 188:	83 b1       	in	r24, 0x03	; 3

}/* i2c_readNak */
 18a:	08 95       	ret

0000018c <_Z21i2c_write_to_registerhhh>:
write data to a register from a given address

Return: 0 if unsuccessful, 1 if successful
************************************************************************/
bool i2c_write_to_register(unsigned char addr, unsigned char reg, unsigned char data)
{
 18c:	1f 93       	push	r17
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	d6 2f       	mov	r29, r22
 194:	14 2f       	mov	r17, r20
	unsigned char ret;
	ret = i2c_start((addr << 1) | I2C_WRITE);
 196:	c8 2f       	mov	r28, r24
 198:	cc 0f       	add	r28, r28
 19a:	8c 2f       	mov	r24, r28
 19c:	0e 94 6c 00 	call	0xd8	; 0xd8 <_Z9i2c_starth>
	if(ret) {
 1a0:	88 23       	and	r24, r24
 1a2:	19 f0       	breq	.+6      	; 0x1aa <_Z21i2c_write_to_registerhhh+0x1e>
		/* failed to issue start condition, possibly no device found */
		i2c_stop();
 1a4:	0e 94 ac 00 	call	0x158	; 0x158 <_Z8i2c_stopv>
 1a8:	11 c0       	rjmp	.+34     	; 0x1cc <_Z21i2c_write_to_registerhhh+0x40>
	} else {
	/* issuing start condition ok, device accessible */

		if(i2c_start_wait((addr << 1) | I2C_WRITE)) {
 1aa:	8c 2f       	mov	r24, r28
 1ac:	0e 94 8a 00 	call	0x114	; 0x114 <_Z14i2c_start_waith>
 1b0:	88 23       	and	r24, r24
 1b2:	61 f0       	breq	.+24     	; 0x1cc <_Z21i2c_write_to_registerhhh+0x40>
			if (!i2c_write(reg)){
 1b4:	8d 2f       	mov	r24, r29
 1b6:	0e 94 b2 00 	call	0x164	; 0x164 <_Z9i2c_writeh>
 1ba:	81 11       	cpse	r24, r1
 1bc:	07 c0       	rjmp	.+14     	; 0x1cc <_Z21i2c_write_to_registerhhh+0x40>
				// Write address was successful
				i2c_write(data);
 1be:	81 2f       	mov	r24, r17
 1c0:	0e 94 b2 00 	call	0x164	; 0x164 <_Z9i2c_writeh>
				i2c_stop();
 1c4:	0e 94 ac 00 	call	0x158	; 0x158 <_Z8i2c_stopv>
				return true;
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	03 c0       	rjmp	.+6      	; 0x1d2 <_Z21i2c_write_to_registerhhh+0x46>
			};
		};
	}
i2c_stop();
 1cc:	0e 94 ac 00 	call	0x158	; 0x158 <_Z8i2c_stopv>
return false;
 1d0:	80 e0       	ldi	r24, 0x00	; 0
		
}
 1d2:	df 91       	pop	r29
 1d4:	cf 91       	pop	r28
 1d6:	1f 91       	pop	r17
 1d8:	08 95       	ret

000001da <_Z22i2c_read_from_registerhh>:
Read data from a register from a given address

Return: byte read from I2C                                                                    
************************************************************************/
unsigned char i2c_read_from_register(unsigned char addr, unsigned char reg) 
{
 1da:	1f 93       	push	r17
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	d8 2f       	mov	r29, r24
 1e2:	16 2f       	mov	r17, r22
	unsigned char ret;
	
	ret = i2c_start((addr << 1) | I2C_WRITE);
 1e4:	c8 2f       	mov	r28, r24
 1e6:	cc 0f       	add	r28, r28
 1e8:	8c 2f       	mov	r24, r28
 1ea:	0e 94 6c 00 	call	0xd8	; 0xd8 <_Z9i2c_starth>
	if(ret) {
 1ee:	88 23       	and	r24, r24
 1f0:	19 f0       	breq	.+6      	; 0x1f8 <_Z22i2c_read_from_registerhh+0x1e>
		/* failed to issue start condition, possibly no device found */
		i2c_stop();
 1f2:	0e 94 ac 00 	call	0x158	; 0x158 <_Z8i2c_stopv>
 1f6:	18 c0       	rjmp	.+48     	; 0x228 <_Z22i2c_read_from_registerhh+0x4e>
	} else {
		
		if(i2c_start_wait((addr << 1) | I2C_WRITE)) {
 1f8:	8c 2f       	mov	r24, r28
 1fa:	0e 94 8a 00 	call	0x114	; 0x114 <_Z14i2c_start_waith>
 1fe:	88 23       	and	r24, r24
 200:	99 f0       	breq	.+38     	; 0x228 <_Z22i2c_read_from_registerhh+0x4e>
			if (!i2c_write(reg)){
 202:	81 2f       	mov	r24, r17
 204:	0e 94 b2 00 	call	0x164	; 0x164 <_Z9i2c_writeh>
 208:	81 11       	cpse	r24, r1
 20a:	0e c0       	rjmp	.+28     	; 0x228 <_Z22i2c_read_from_registerhh+0x4e>
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
 20c:	8d 2f       	mov	r24, r29
 20e:	88 0f       	add	r24, r24
 210:	81 60       	ori	r24, 0x01	; 1
 212:	0e 94 6c 00 	call	0xd8	; 0xd8 <_Z9i2c_starth>
	} else {
		
		if(i2c_start_wait((addr << 1) | I2C_WRITE)) {
			if (!i2c_write(reg)){
			// Write address was successful
				if (!i2c_rep_start((addr << 1 ) | I2C_READ)) {
 216:	81 11       	cpse	r24, r1
 218:	07 c0       	rjmp	.+14     	; 0x228 <_Z22i2c_read_from_registerhh+0x4e>
					// Device is accessible
					ret = i2c_readNak();
 21a:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z11i2c_readNakv>
 21e:	c8 2f       	mov	r28, r24
					i2c_stop();	
 220:	0e 94 ac 00 	call	0x158	; 0x158 <_Z8i2c_stopv>
					return ret;
 224:	8c 2f       	mov	r24, r28
 226:	03 c0       	rjmp	.+6      	; 0x22e <_Z22i2c_read_from_registerhh+0x54>
				};
			};
		};
	}
	i2c_stop();
 228:	0e 94 ac 00 	call	0x158	; 0x158 <_Z8i2c_stopv>
	return 0;
 22c:	80 e0       	ldi	r24, 0x00	; 0
				//return ret;
			//};
		//};
	//};
	//i2c_stop();
 22e:	df 91       	pop	r29
 230:	cf 91       	pop	r28
 232:	1f 91       	pop	r17
 234:	08 95       	ret

00000236 <_exit>:
 236:	f8 94       	cli

00000238 <__stop_program>:
 238:	ff cf       	rjmp	.-2      	; 0x238 <__stop_program>
